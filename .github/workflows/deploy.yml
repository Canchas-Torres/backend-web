# .github/workflows/deploy.yml
name: Deploy Serverless Services to AWS

on:
  push:
    branches:
      - main # Dispara el workflow en cada push a la rama 'main'
  pull_request:
    branches:
      - main # Opcional: Tambi√©n se ejecuta en Pull Requests para validaci√≥n

jobs:
  deploy:
    runs-on: ubuntu-latest # El entorno donde se ejecutar√° tu workflow

    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # Clona tu repositorio

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18' # Usa la misma versi√≥n de Node.js que tus Lambdas

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9' # Versi√≥n compatible con AWS Lambda

      - name: Install Serverless Framework (global)
        run: npm install -g serverless@3

      - name: Install Serverless Python Requirements Plugin
        run: npm install -g serverless-python-requirements

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1 # La regi√≥n de AWS donde desplegar√°s todos tus servicios

      - name: Deploy all Serverless services
        # Aqu√≠ definimos un array de los directorios de tus servicios
        # Aseg√∫rate de que estos nombres coincidan con tus carpetas reales
        run: |
          SERVICE_DIRS=(api-canchas api-pagos api-reservas api-usuarios)
          DEPLOY_STAGE="dev" # Define aqu√≠ la etapa de despliegue (dev, staging, prod)

          for service_dir in "${SERVICE_DIRS[@]}"; do
            echo "::group::Deploying service: $service_dir" # Esto crea un grupo colapsable en los logs de GitHub Actions
            
            # Verifica que el directorio existe
            if [ ! -d "$service_dir" ]; then
              echo "‚ö†Ô∏è  Directory $service_dir does not exist, skipping..."
              echo "::endgroup::"
              continue
            fi
            
            # Navega al directorio del servicio
            cd "$service_dir"
            
            # Verifica que existe serverless.yml
            if [ ! -f "serverless.yml" ]; then
              echo "‚ö†Ô∏è  No serverless.yml found in $service_dir, skipping deployment..."
              cd ..
              echo "::endgroup::"
              continue
            fi
            
            # Instala las dependencias seg√∫n el tipo de proyecto
            if [ -f "package.json" ]; then
              echo "üì¶ Installing Node.js dependencies for $service_dir..."
              npm install
            elif [ -f "requirements.txt" ]; then
              echo "üêç Installing Python dependencies for $service_dir..."
              pip install -r requirements.txt
            elif [ -f "Pipfile" ]; then
              echo "üêç Installing Python dependencies with Pipenv for $service_dir..."
              pip install pipenv
              pipenv install --deploy
            else
              echo "‚ÑπÔ∏è  No dependency file found for $service_dir (package.json, requirements.txt, or Pipfile)"
            fi

            # Despliega el servicio
            echo "üöÄ Deploying $service_dir to AWS stage: $DEPLOY_STAGE"
            sls deploy --stage "$DEPLOY_STAGE" --verbose

            # Regresa al directorio ra√≠z del repositorio antes de ir al siguiente servicio
            cd .. 
            echo "‚úÖ Successfully deployed $service_dir"
            echo "::endgroup::"
          done
        # Opcional: Si tienes variables de entorno espec√≠ficas para el despliegue
        # env:
        #   MY_CUSTOM_VAR: 'some_value'
